import { useEffect, useState } from "react";
import { useSearchParams } from "next/navigation";
import Head from "next/head";
import fetchData from "@/utils/getAnimals";
import { AnimalKey, AnimalResult } from "@/types";
import { faker } from "@faker-js/faker";
import { Header } from "@/components/Header/Header";
import { ResultList } from "@/components/ResultsList/ResultsList";
import { PaginationControl } from "@/components/PaginationControls/PaginationControls";

export default function SearchResults() {
  const searchParams = useSearchParams();
  const searchQuery = searchParams.get("q") || undefined;
  const [results, setResults] = useState<AnimalResult[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [paginatedResults, setPaginatedResults] = useState<AnimalResult[]>([]);
  const [currentPage, setCurrentPage] = useState(0);

  const RESULTS_PER_PAGE = 10;
  const animalTypes = Object.keys(faker.animal);

  const loadResults = async (searchQuery: string) => {
    setIsLoading(true);
    setError(null);
    try {
      if (animalTypes.includes(searchQuery)) {
        const results = await fetchData(searchQuery as AnimalKey);
        setResults(results);
      } else {
        setError("No results found for");
      }
    } catch {
      setError("Loading error, please try again");
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    if (searchQuery) {
      loadResults(searchQuery);
    }
  }, [searchQuery]);

  useEffect(() => {
    const start = currentPage * RESULTS_PER_PAGE;
    const end = start + RESULTS_PER_PAGE;
    setPaginatedResults(results.slice(start, end));
  }, [currentPage, results]);

  const handleNextPage = () => {
    setCurrentPage((prevPage) => prevPage + 1);
  };

  const handlePrevPage = () => {
    setCurrentPage((prevPage) => prevPage - 1);
  };

  return (
    <>
      <Head>
        <title>{searchQuery} - Search with Google</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header searchQuery={searchQuery} />
      <main>
        <ResultList
          results={paginatedResults}
          isLoading={isLoading}
          searchQuery={searchQuery}
          error={error}
          animalTypes={animalTypes.slice(1, -1)}
        />
        <PaginationControl
          currentPage={currentPage}
          resultsLength={results.length}
          resultsPerPage={RESULTS_PER_PAGE}
          handleNextPage={handleNextPage}
          handlePrevPage={handlePrevPage}
        />
      </main>
    </>
  );
}
